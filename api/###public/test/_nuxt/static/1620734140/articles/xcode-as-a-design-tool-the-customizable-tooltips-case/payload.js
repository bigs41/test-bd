__NUXT_JSONP__("/articles/xcode-as-a-design-tool-the-customizable-tooltips-case", {data:[{article:{id:1,status:"published",created_on:"2020-01-23T15:30:35+00:00",title:"Xcode as a Design Tool: the Customizable Tooltips Case",introduction:"\u003Cp\u003EThe other day I was reviewing the implementation of an iOS app design I helped design. While most of the design was looking great, one thing immediately struck my eye. The tooltips I carefully crafted didn&rsquo;t look at all like how I intended them to look. When I asked the developers about it, they said it would be too difficult to implement them without using an existing framework (and its restricted styling options).\u003C\u002Fp\u003E",content:"\u003Cfigure\u003E\u003Cimg src=\"https:\u002F\u002Fs3.eu-west-3.amazonaws.com\u002Fsimonwuyts-portfolio\u002F5a0f5548-ad4d-4a92-a284-35448444a69b.png\" alt=\"Design vs Implementation\" width=\"1614\" height=\"288\" \u002F\u003E\u003C\u002Ffigure\u003E\n\u003Cp\u003EThat made me wonder if I could find an easier way to sneak the right tooltips in. I started diving a bit deeper into drawing and styling custom shapes in Swift\u002FXcode. Since the tooltips in my design don&rsquo;t need complex animations or interactions, it was not my intent to write a custom tooltip framework (since they already exist). What I did want to explore was how a designer with a base knowledge of programming could contribute to a better handoff of custom styled controls.\u003C\u002Fp\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003EWhat if I could make it as easy for the developer to implement my tooltip design as to drag a button on a storyboard\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Cp\u003EAfter digging through \u003Ca href=\"https:\u002F\u002Fdeveloper.apple.com\u002Freference\u002Fcoregraphics\" target=\"_blank\" rel=\"noreferrer noopener\"\u003Esome\u003C\u002Fa\u003E \u003Ca href=\"https:\u002F\u002Fdeveloper.apple.com\u002Freference\u002Fuikit\u002Fuibezierpath\" target=\"_blank\" rel=\"noreferrer noopener\"\u003Euseful\u003C\u002Fa\u003E \u003Ca href=\"https:\u002F\u002Fdeveloper.apple.com\u002Flibrary\u002Fcontent\u002Freferencelibrary\u002FGettingStarted\u002FDevelopiOSAppsSwift\u002FImplementingACustomControl.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003Eparts\u003C\u002Fa\u003E of Apple&rsquo;s iOS development documentation, I decided to address my challenge step by step.\u003C\u002Fp\u003E\n\u003Ch2\u003EStep 1: Goals\u003C\u002Fh2\u003E\n\u003Cp\u003EBefore I started writing code, I made a list of goals and requirements:\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003EThe tooltip should look exactly the way I want it to look (including the tilted tip, multiple shadows and padding).\u003C\u002Fli\u003E\n\u003Cli\u003EIt should be scalable and should play nice with \u003Ca href=\"https:\u002F\u002Fdeveloper.apple.com\u002Flibrary\u002Fcontent\u002Fdocumentation\u002FUserExperience\u002FConceptual\u002FAutolayoutPG\u002Findex.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003EAuto Layout\u003C\u002Fa\u003E.\u003C\u002Fli\u003E\n\u003Cli\u003EIt should be able to contain whatever objects you want it to contain, not just text.\u003C\u002Fli\u003E\n\u003Cli\u003EAdding a tooltip should be as easy as dragging and dropping an object.\u003C\u002Fli\u003E\n\u003Cli\u003EChanging the style of the tooltip should be a matter of tweaking a few variables and should not require much knowledge of the design logic itself.\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch2\u003EStep 2: The Inspectables\u003C\u002Fh2\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fs3.eu-west-3.amazonaws.com\u002Fsimonwuyts-portfolio\u002F92204455-ef19-4e40-9416-2e9141dbefad.png\" alt=\"Inspectables\" width=\"357\" height=\"453\" \u002F\u003E\u003C\u002Fp\u003E\n\u003Cp\u003ETurns out, you can add the \u003Ccode\u003E@IBInspectable\u003C\u002Fcode\u003E annotation to make parameters adjustable from the inspector. That's even better than I expected.After creating a new Cocoa class in Xcode (File &gt; New &gt; File&hellip;), naming it \u003Ccode\u003ETooltipView.swift\u003C\u002Fcode\u003E and making it a subclass of \u003Ccode\u003EUIView\u003C\u002Fcode\u003E, I added some variables to make things customizable.\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"language-swift\"\u003E@IBInspectable var arrowTopLeft: Bool = false\n@IBInspectable var arrowTopCenter: Bool = true\n@IBInspectable var arrowTopRight: Bool = false\n@IBInspectable var arrowBottomLeft: Bool = false\n@IBInspectable var arrowBottomCenter: Bool = false\n@IBInspectable var arrowBottomRight: Bool = false\n\t\n@IBInspectable var fillColor: UIColor = UIColor.white\n\t\n@IBInspectable var borderColor: UIColor = UIColor(red:0, green:0, blue:0, alpha:0.05)\n@IBInspectable var borderRadius: CGFloat = 18\n@IBInspectable var borderWidth: CGFloat = 1\n\t\n@IBInspectable var shadowColor: UIColor = UIColor(red:0, green:0, blue:0, alpha:0.14)\n@IBInspectable var shadowOffsetX: CGFloat = 0\n@IBInspectable var shadowOffsetY: CGFloat = 2\n@IBInspectable var shadowBlur: CGFloat = 10\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch2\u003EStep 3: Here&rsquo;s Where the Math Comes in\u003C\u002Fh2\u003E\n\u003Cp\u003ETo translate the tooltip shape to code, I first mapped it on an X and Y axis. Based on three variables, I was able to define all the necessary coordinates: \u003Ccode\u003EtooltipWidth\u003C\u002Fcode\u003E, \u003Ccode\u003EtooltipHeight\u003C\u002Fcode\u003E and \u003Ccode\u003EborderRadius\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fs3.eu-west-3.amazonaws.com\u002Fsimonwuyts-portfolio\u002Ffeaf4fde-eb5f-4d75-9ab6-17a10fa7f346.gif\" alt=\"Math\" width=\"1600\" height=\"844\" \u002F\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"background-color: #eceff1; font-family: 'Roboto Mono', monospace; font-size: 18px;\"\u003E\u002F\u002F Define Bubble Shape\u003C\u002Fspan\u003ETranslating this shape to Swift code wasn&rsquo;t that hard, the result is even pretty readable:\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"language-swift\"\u003Elet bubblePath = UIBezierPath()\n\t\n\u002F\u002F Top left corner\nbubblePath.move(to: topLeft(0, borderRadius))\nbubblePath.addCurve(to: topLeft(borderRadius, 0), controlPoint1: topLeft(0, borderRadius \u002F 2), controlPoint2: topLeft(borderRadius \u002F 2, 0))\n\t\n\u002F\u002F Top right corner\nbubblePath.addLine(to: topRight(borderRadius, 0))\nbubblePath.addCurve(to: topRight(0, borderRadius), controlPoint1: topRight(borderRadius \u002F 2, 0), controlPoint2: topRight(0, borderRadius \u002F 2))\n\t\n\u002F\u002F Bottom right corner\nbubblePath.addLine(to: bottomRight(0, borderRadius))\nbubblePath.addCurve(to: bottomRight(borderRadius, 0), controlPoint1: bottomRight(0, borderRadius \u002F 2), controlPoint2: bottomRight(borderRadius \u002F 2, 0))\n\t\n\u002F\u002F Bottom left corner\nbubblePath.addLine(to: bottomLeft(borderRadius, 0))\nbubblePath.addCurve(to: bottomLeft(0, borderRadius), controlPoint1: bottomLeft(borderRadius \u002F 2, 0), controlPoint2: bottomLeft(0, borderRadius \u002F 2))\nbubblePath.close()\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003EIn the same way, I added the different tooltip arrows to the path. I now had a \u003Ccode\u003EUIBezierPath\u003C\u002Fcode\u003E object describing the tooltip shape, but my storyboard was still empty.\u003C\u002Fp\u003E\n\u003Ch2\u003EStep 4: Let&rsquo;s Paint\u003C\u002Fh2\u003E\n\u003Cp\u003EThe last thing I needed to do before switching to the storyboard, was making sure the path was painted. \u003Ccode\u003EUIKit\u003C\u002Fcode\u003E lets you stack as many layers on top of each other as you like while reusing the same shape definition. I split the tooltip into three layers (shadow, border and fill) and inserted them into the custom view:\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"language-swift\"\u003E\u002F\u002F Shadow Layer\nlet shadowShape = CAShapeLayer()\nshadowShape.path = bubblePath.cgPath\nshadowShape.fillColor = fillColor.cgColor\nshadowShape.shadowColor = shadowColor.cgColor\nshadowShape.shadowOffset = CGSize(width: CGFloat(shadowOffsetX), height: CGFloat(shadowOffsetY))\nshadowShape.shadowRadius = CGFloat(shadowBlur)\nshadowShape.shadowOpacity = 0.8\n\t\n\u002F\u002F Border Layer\nlet borderShape = CAShapeLayer()\nborderShape.path = bubblePath.cgPath\nborderShape.fillColor = fillColor.cgColor\nborderShape.strokeColor = borderColor.cgColor\nborderShape.lineWidth = CGFloat(borderWidth*2)\n\t\n\u002F\u002F Fill Layer\nlet fillShape = CAShapeLayer()\nfillShape.path = bubblePath.cgPath\nfillShape.fillColor = fillColor.cgColor\n\t\n\u002F\u002F Add Sublayers\nself.layer.insertSublayer(shadowShape, at: 0)\nself.layer.insertSublayer(borderShape, at: 0)\nself.layer.insertSublayer(fillShape, at: 0)\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch2\u003EStep 5: The Proof of the Pudding\u003C\u002Fh2\u003E\n\u003Cp\u003ETime to put this brand new custom control to the test.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fs3.eu-west-3.amazonaws.com\u002Fsimonwuyts-portfolio\u002Fb6ba7f2e-0efa-4807-bf38-189b9fcf1a1f.gif\" alt=\"Result\" width=\"752\" height=\"811\" \u002F\u003E\u003C\u002Fp\u003E\n\u003Cp\u003ETo my own surprise, I saw exactly the result I had hoped for: a responsive, easy-to-use, framework-free and customizable tooltip. Long story short: Xcode and Swift are remarkably easy when it comes to designing custom iOS controls. They might even spare you (and your developers) a headache.\u003C\u002Fp\u003E\n\u003Ch3\u003ETL;DR\u003C\u002Fh3\u003E\n\u003Cp\u003E\u003Cstrong\u003EBy mixing and matching some basic math, Xcode&rsquo;s \u003Ccode\u003E@IBDesignable\u003C\u002Fcode\u003E and\u003Ccode\u003E@IBInspectable\u003C\u002Fcode\u003E functionality and a few lines of Swift code, even designers can deliver custom iOS controls.\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fgist.github.com\u002Fsimonwuyts\u002F24c4ff3557b9ed9b2fa09cae2ec4fbb7\" target=\"_blank\" rel=\"noreferrer noopener\"\u003EYou can find the full result on Github.\u003C\u002Fa\u003E\u003C\u002Fp\u003E",tags:["swift","uidesign","xcode"],slug:"xcode-as-a-design-tool-the-customizable-tooltips-case",date:"2017-07-05",social_image:null}}],fetch:[],mutations:void 0});