{
    "version": "https://jsonfeed.org/version/1",
    "title": "Simon Wuyts - Articles",
    "home_page_url": "https://www.simonwuyts.com/articles/feed.json",
    "items": [
        {
            "id": "xcode-as-a-design-tool-the-customizable-tooltips-case",
            "content_html": "<figure><img src=\"https://s3.eu-west-3.amazonaws.com/simonwuyts-portfolio/5a0f5548-ad4d-4a92-a284-35448444a69b.png\" alt=\"Design vs Implementation\" width=\"1614\" height=\"288\" /></figure>\n<p>That made me wonder if I could find an easier way to sneak the right tooltips in. I started diving a bit deeper into drawing and styling custom shapes in Swift/Xcode. Since the tooltips in my design don&rsquo;t need complex animations or interactions, it was not my intent to write a custom tooltip framework (since they already exist). What I did want to explore was how a designer with a base knowledge of programming could contribute to a better handoff of custom styled controls.</p>\n<blockquote>\n<p>What if I could make it as easy for the developer to implement my tooltip design as to drag a button on a storyboard</p>\n</blockquote>\n<p>After digging through <a href=\"https://developer.apple.com/reference/coregraphics\" target=\"_blank\" rel=\"noreferrer noopener\">some</a> <a href=\"https://developer.apple.com/reference/uikit/uibezierpath\" target=\"_blank\" rel=\"noreferrer noopener\">useful</a> <a href=\"https://developer.apple.com/library/content/referencelibrary/GettingStarted/DevelopiOSAppsSwift/ImplementingACustomControl.html\" target=\"_blank\" rel=\"noreferrer noopener\">parts</a> of Apple&rsquo;s iOS development documentation, I decided to address my challenge step by step.</p>\n<h2>Step 1: Goals</h2>\n<p>Before I started writing code, I made a list of goals and requirements:</p>\n<ul>\n<li>The tooltip should look exactly the way I want it to look (including the tilted tip, multiple shadows and padding).</li>\n<li>It should be scalable and should play nice with <a href=\"https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/index.html\" target=\"_blank\" rel=\"noreferrer noopener\">Auto Layout</a>.</li>\n<li>It should be able to contain whatever objects you want it to contain, not just text.</li>\n<li>Adding a tooltip should be as easy as dragging and dropping an object.</li>\n<li>Changing the style of the tooltip should be a matter of tweaking a few variables and should not require much knowledge of the design logic itself.</li>\n</ul>\n<h2>Step 2: The Inspectables</h2>\n<p><img src=\"https://s3.eu-west-3.amazonaws.com/simonwuyts-portfolio/92204455-ef19-4e40-9416-2e9141dbefad.png\" alt=\"Inspectables\" width=\"357\" height=\"453\" /></p>\n<p>Turns out, you can add the <code>@IBInspectable</code> annotation to make parameters adjustable from the inspector. That's even better than I expected.After creating a new Cocoa class in Xcode (File &gt; New &gt; File&hellip;), naming it <code>TooltipView.swift</code> and making it a subclass of <code>UIView</code>, I added some variables to make things customizable.</p>\n<pre><code class=\"language-swift\">@IBInspectable var arrowTopLeft: Bool = false\n@IBInspectable var arrowTopCenter: Bool = true\n@IBInspectable var arrowTopRight: Bool = false\n@IBInspectable var arrowBottomLeft: Bool = false\n@IBInspectable var arrowBottomCenter: Bool = false\n@IBInspectable var arrowBottomRight: Bool = false\n\t\n@IBInspectable var fillColor: UIColor = UIColor.white\n\t\n@IBInspectable var borderColor: UIColor = UIColor(red:0, green:0, blue:0, alpha:0.05)\n@IBInspectable var borderRadius: CGFloat = 18\n@IBInspectable var borderWidth: CGFloat = 1\n\t\n@IBInspectable var shadowColor: UIColor = UIColor(red:0, green:0, blue:0, alpha:0.14)\n@IBInspectable var shadowOffsetX: CGFloat = 0\n@IBInspectable var shadowOffsetY: CGFloat = 2\n@IBInspectable var shadowBlur: CGFloat = 10</code></pre>\n<h2>Step 3: Here&rsquo;s Where the Math Comes in</h2>\n<p>To translate the tooltip shape to code, I first mapped it on an X and Y axis. Based on three variables, I was able to define all the necessary coordinates: <code>tooltipWidth</code>, <code>tooltipHeight</code> and <code>borderRadius</code>.</p>\n<p><img src=\"https://s3.eu-west-3.amazonaws.com/simonwuyts-portfolio/feaf4fde-eb5f-4d75-9ab6-17a10fa7f346.gif\" alt=\"Math\" width=\"1600\" height=\"844\" /></p>\n<p><span style=\"background-color: #eceff1; font-family: 'Roboto Mono', monospace; font-size: 18px;\">// Define Bubble Shape</span>Translating this shape to Swift code wasn&rsquo;t that hard, the result is even pretty readable:</p>\n<pre><code class=\"language-swift\">let bubblePath = UIBezierPath()\n\t\n// Top left corner\nbubblePath.move(to: topLeft(0, borderRadius))\nbubblePath.addCurve(to: topLeft(borderRadius, 0), controlPoint1: topLeft(0, borderRadius / 2), controlPoint2: topLeft(borderRadius / 2, 0))\n\t\n// Top right corner\nbubblePath.addLine(to: topRight(borderRadius, 0))\nbubblePath.addCurve(to: topRight(0, borderRadius), controlPoint1: topRight(borderRadius / 2, 0), controlPoint2: topRight(0, borderRadius / 2))\n\t\n// Bottom right corner\nbubblePath.addLine(to: bottomRight(0, borderRadius))\nbubblePath.addCurve(to: bottomRight(borderRadius, 0), controlPoint1: bottomRight(0, borderRadius / 2), controlPoint2: bottomRight(borderRadius / 2, 0))\n\t\n// Bottom left corner\nbubblePath.addLine(to: bottomLeft(borderRadius, 0))\nbubblePath.addCurve(to: bottomLeft(0, borderRadius), controlPoint1: bottomLeft(borderRadius / 2, 0), controlPoint2: bottomLeft(0, borderRadius / 2))\nbubblePath.close()</code></pre>\n<p>In the same way, I added the different tooltip arrows to the path. I now had a <code>UIBezierPath</code> object describing the tooltip shape, but my storyboard was still empty.</p>\n<h2>Step 4: Let&rsquo;s Paint</h2>\n<p>The last thing I needed to do before switching to the storyboard, was making sure the path was painted. <code>UIKit</code> lets you stack as many layers on top of each other as you like while reusing the same shape definition. I split the tooltip into three layers (shadow, border and fill) and inserted them into the custom view:</p>\n<pre><code class=\"language-swift\">// Shadow Layer\nlet shadowShape = CAShapeLayer()\nshadowShape.path = bubblePath.cgPath\nshadowShape.fillColor = fillColor.cgColor\nshadowShape.shadowColor = shadowColor.cgColor\nshadowShape.shadowOffset = CGSize(width: CGFloat(shadowOffsetX), height: CGFloat(shadowOffsetY))\nshadowShape.shadowRadius = CGFloat(shadowBlur)\nshadowShape.shadowOpacity = 0.8\n\t\n// Border Layer\nlet borderShape = CAShapeLayer()\nborderShape.path = bubblePath.cgPath\nborderShape.fillColor = fillColor.cgColor\nborderShape.strokeColor = borderColor.cgColor\nborderShape.lineWidth = CGFloat(borderWidth*2)\n\t\n// Fill Layer\nlet fillShape = CAShapeLayer()\nfillShape.path = bubblePath.cgPath\nfillShape.fillColor = fillColor.cgColor\n\t\n// Add Sublayers\nself.layer.insertSublayer(shadowShape, at: 0)\nself.layer.insertSublayer(borderShape, at: 0)\nself.layer.insertSublayer(fillShape, at: 0)</code></pre>\n<h2>Step 5: The Proof of the Pudding</h2>\n<p>Time to put this brand new custom control to the test.</p>\n<p><img src=\"https://s3.eu-west-3.amazonaws.com/simonwuyts-portfolio/b6ba7f2e-0efa-4807-bf38-189b9fcf1a1f.gif\" alt=\"Result\" width=\"752\" height=\"811\" /></p>\n<p>To my own surprise, I saw exactly the result I had hoped for: a responsive, easy-to-use, framework-free and customizable tooltip. Long story short: Xcode and Swift are remarkably easy when it comes to designing custom iOS controls. They might even spare you (and your developers) a headache.</p>\n<h3>TL;DR</h3>\n<p><strong>By mixing and matching some basic math, Xcode&rsquo;s <code>@IBDesignable</code> and<code>@IBInspectable</code> functionality and a few lines of Swift code, even designers can deliver custom iOS controls.</strong></p>\n<p><a href=\"https://gist.github.com/simonwuyts/24c4ff3557b9ed9b2fa09cae2ec4fbb7\" target=\"_blank\" rel=\"noreferrer noopener\">You can find the full result on Github.</a></p>",
            "url": "https://www.simonwuyts.com/articles/xcode-as-a-design-tool-the-customizable-tooltips-case",
            "title": "Xcode as a Design Tool: the Customizable Tooltips Case",
            "summary": "<p>The other day I was reviewing the implementation of an iOS app design I helped design. While most of the design was looking great, one thing immediately struck my eye. The tooltips I carefully crafted didn&rsquo;t look at all like how I intended them to look. When I asked the developers about it, they said it would be too difficult to implement them without using an existing framework (and its restricted styling options).</p>",
            "date_modified": "2017-07-05T00:00:00.000Z"
        },
        {
            "id": "two-days-of-creative-code-a-thank-you-note",
            "content_html": "<h2>5 Things that Made dotCSS and dotJS a Great Experience for Me</h2>\n<ol>\n<li><strong>The speakers were a treat.</strong> <strong>üì£ </strong>Every one of them showed craftsmanship, while still all telling a different story.</li>\n<li><strong>The venue was impressive. üè∞</strong> As was the stage decoration. No better place to start a day full of creativity.</li>\n<li><strong>The food was delicious.</strong> <strong>ü•ê </strong>And plenty, too much to taste it all.</li>\n<li><strong>The background music was spot-on. üé∂</strong> From Metronomy to Arcade Fire, it set the perfect mood.</li>\n<li><strong>Everyone was approachable. üëã </strong>Whether it was someone of the organizing team, one of the speakers, or the lady behind the buffet: everyone was friendly and never more than a few steps away.&zwj;</li>\n</ol>\n<h2>5 Thruths I Learned at dotCSS and dotJS</h2>\n<h3>1. Radio waves contain a lot more secrets than you might expect.</h3>\n<p>After hearing <a href=\"https://wa.tson.dk/\" target=\"_blank\" rel=\"noreferrer noopener\">Thomas Watson</a> &lsquo;s talk on receiving live airplane information with a simple digital TV antenna and some NodeJS, I decided to experiment more with combining hardware and JavaScript to build unexpected experiences.</p>\n<figure><img src=\"https://s3.eu-west-3.amazonaws.com/simonwuyts-portfolio/e0893d4a-f939-463f-8b21-9457785cb2af.jpeg\" alt=\"Flights\" width=\"4000\" height=\"3000\" /></figure>\n<h3>2. Whether you like the Dropbox rebranding or not, variable fonts are here to stay.</h3>\n<p><a href=\"https://twitter.com/lorp\" target=\"_blank\" rel=\"noreferrer noopener\">Laurence Penney</a> demoed the future of (web) fonts with his own <a href=\"http://www.axis-praxis.org/specimens/__DEFAULT__\" target=\"_blank\" rel=\"noreferrer noopener\">Axis Praxis</a> tool. Long story short: version 1.8 of the OpenType spec features a very smart way to enable font features like x-height, font weight or italic to be set dynamically. This results in much smaller file sizes and opens yet another world of web typography possibilities. Best of all, even a simple website with only three font variations can benefit from this.</p>\n<h3>3. Javascript developers can be funny.</h3>\n<p>Who thought of developers as boring people, think again. In his talk, Feross Aboukhadijeh unveiled in a hilarious way his holy quest to make the most annoying website possible with today&rsquo;s browser technology. You should definitely <a href=\"http://theannoyingsite.com/\" target=\"_blank\" rel=\"noreferrer noopener\">check it out for yourself</a> or read more about it <a href=\"https://feross.org/\" target=\"_blank\" rel=\"noreferrer noopener\">on his blog</a> .</p>\n<h3>4. Web accessibility is more than technology, it&rsquo;s also ethics.</h3>\n<p>Both Marcy Sutton and Suz Hinton talked about accessibility on the web. Suz showed how we can use new technologies like Machine Learning and AI to improve accessibility on almost any website. Marcy, on the other hand, pointed out that making your web projects accessible doesn&rsquo;t have to be hard and that it&rsquo;s often a question of caring. If accessibility only matters to you when it&rsquo;s personal, make it personal. Consciously trying to understand and anticipate to people&rsquo;s needs is more than an afterthought, it can change both peoples lives and your sales numbers.</p>\n<figure><img src=\"https://s3.eu-west-3.amazonaws.com/simonwuyts-portfolio/599cb006-a2fc-4f92-8cf3-7fa264fec3e0.jpeg\" alt=\"Accessibility\" width=\"4000\" height=\"3000\" /></figure>\n<h3>5. There are always some syntax parts you did not know about yet.</h3>\n<ul>\n<li>Turns out <code>place-items: center</code> is short for both <code>align-items: center</code> and <code>justify-items: center</code> , while <code>display: contents</code> \"unboxes\" the target element's children. Saved another 20 bytes thanks to <a href=\"https://twitter.com/bdc\" target=\"_blank\" rel=\"noreferrer noopener\">Benjamin De Cock</a> .</li>\n<li>Turns out <code>await</code> / <code>async</code> pattern is a nicer way to write Promise-based JavaScript. Can not wait to try it, thanks to <a href=\"http://wesbos.com/\" target=\"_blank\" rel=\"noreferrer noopener\">Wes Bos</a> .</li>\n<li>There&rsquo;s more to media queries than <code>screen</code> and <code>print</code> . If the plans of <a href=\"https://florian.rivoal.net/\" target=\"_blank\" rel=\"noreferrer noopener\">Florian Rivoal</a> and the CSS Working Group gather some browser support, we might soon be querying based on specific target features‚∏∫pointer support, script support or hover support‚∏∫instead of targeting devices itself. The <a href=\"https://www.w3.org/TR/mediaqueries-4/\" target=\"_blank\" rel=\"noreferrer noopener\">W3C Media Queries Level 4 spec proposal</a> is worth giving a read.</li>\n</ul>\n<h3>TL;DR</h3>\n<p>My last two days at dotCSS and dotJS conference exceeded my expectations. I learned lots of new things, met passionate people and hope to be back next year. <em>Merci &agrave; tous!</em></p>",
            "url": "https://www.simonwuyts.com/articles/two-days-of-creative-code-a-thank-you-note",
            "title": "Two Days of Creative Code: a Thank You Note",
            "summary": "<p>This Thursday and Friday I went to Paris to attend the <a href=\"http://www.dotcss.io/\" target=\"_blank\" rel=\"noreferrer noopener\">dotCSS</a> and <a href=\"http://www.dotjs.io/\" target=\"_blank\" rel=\"noreferrer noopener\">dotJS</a> conferences. As I went all alone, I was a bit nervous about the trip (and about how to behave in such a big intimidating group of talented people). Turned out, the organizers did an excellent job at making a giant crowd feel like a cozy get-together. Even the stage looked like a homely jungle-themed living room. I had an amazing two days: I learned a lot, admired the stylish city (and citizens) of Paris and talked to a bunch of nice and like-minded people. And on top of that, I felt that I had pushed some personal boundaries.</p>",
            "date_modified": "2017-12-02T00:00:00.000Z"
        },
        {
            "id": "vuejs-and-d3-a-chart-waiting-to-happen",
            "content_html": "<figure><iframe id=\"talk_frame_506814\" class=\"wide\" style=\"border: 0; padding: 0; background: transparent;\" src=\"//speakerdeck.com/player/cdacbd922db34e72a62bf35dec27d95b\" width=\"710\" height=\"399\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"></iframe></figure>\n<p>Right now, I&rsquo;m working on a project called uman.ai, together with <a href=\"http://ml6.eu/\" target=\"_blank\" rel=\"noreferrer noopener\">ML6</a>, a Ghent-based company specialized in Machine Learning. <a href=\"http://uman.ai/\" target=\"_blank\" rel=\"noreferrer noopener\">Uman.ai</a> explores new ways of gaining insight in talents and skills within organizations with the help of Artificial Intelligence. I took on the challenge to find a good interactive visualization for this model.</p>\n<p>After making some first rough sketches, I started exploring well-known existing libraries like <strong>Chart.js</strong> and <strong>Highcharts</strong>. However, none of them turned out to be a good fit for this very specific situation. And this is where <a href=\"http://d3js.org/\" target=\"_blank\" rel=\"noreferrer noopener\"> <strong>D3.js</strong> </a> got in and I first got the idea for this talk.</p>\n<h2>D3.js</h2>\n<p>D3 had always felt kind of unfeasable for me. Most of the demo projects I saw were impressive, but they also looked pretty hard to recreate. For a long time I was convinced D3 was only suited for large and complex projects. I turned out to be wrong.</p>\n<p>Before diving into some code, let me quickly give you an overview of what D3 exactly is. D3 is short for <em>Data Driven Documents</em> and calls itself <em>&ldquo;a JavaScript library for manipulating documents based on data&rdquo;</em>. D3 doesn&rsquo;t include any pre-built visualizations, but provides you with a lot of useful utilities. This list of utilities might look a little intimidating at first, but we will only need a few.</p>\n<p>D3 has a jQuery-like syntax when it comes to defining templates:</p>\n<pre><code class=\"language-javascript\">// Add a  element for every data point\nconst leaf = svg.selectAll('g').data(circles)\n\n// Append a styled  to every  element\nleaf\n  .append('circle')\n  .attr('id', d =&gt; d.data.id)\n  .attr('r', d =&gt; d.r)\n  .attr('fill-opacity', 0.7)\n  .attr('fill', d =&gt; d.data.color)\n</code></pre>\n<p>This might work well most of the time, but it feels a little counter-intuitive when you&rsquo;re already using Vue.js in your project. With Vue.js, you&rsquo;re probably used to template code that has a close connection the actual HTML result. In the next part of this article, I will show you how to replace the rendering part in the D3 workflow with Vue&rsquo;s templating system we&rsquo;re already using.</p>\n<h2>Let's write some code</h2>\n<p>For the sake of simplicity, I will use the example of a flower shop here. Let&rsquo;s start with Vue component with nothing more than an empty SVG element and some base data to start from.</p>\n<pre><code class=\"language-markup\">&lt;template&gt;\n  &lt;svg width=\"500\" height=\"500\"&gt;\n  &lt;/svg&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      flowers: [\n        {\n          name: 'Roses',\n          amount: 25,\n          color: '#cc2936'\n        },\n        {\n          name: 'Tulips',\n          amount: 40,\n          color: '#f2c640'\n        },\n        {\n          name: 'Daisies',\n          amount: 15,\n          color: '#2a93d4'\n        },\n        {\n          name: 'Narcissuses',\n          amount: 9,\n          color: '#F7AD0A'\n        }\n      ]\n    }\n  }\n}\n&lt;/script&gt;</code></pre>\n<p>We now need to find out the best way to:</p>\n<ol>\n<li>Render a circle for every type of flower</li>\n<li>Size the circles according to the amount of flowers</li>\n<li>Give each circle the right color</li>\n<li>Find the best position for each circle</li>\n</ol>\n<p>This last one is the trickiest one, since we will need some kind of algorithm to calculate the most optimal positions. The algorithm we need is called <a href=\"https://en.wikipedia.org/wiki/Circle_packing\" target=\"_blank\" rel=\"noreferrer noopener\">Circle Packing</a>. One of the layout utilities D3 offers is the <strong>pack layout</strong>. It takes a data set (which is called a hierarchy here) and outputs a set of packed circles. Exactly what we need.</p>\n<p>However, for D3 to correctly parse our flower data, we have to pass it through in a specific format. Let&rsquo;s use a computed property to transform our original state:</p>\n<pre><code class=\"language-markup\">&lt;template&gt;\n  &lt;svg width=\"500\" height=\"500\"&gt;\n  &lt;/svg&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      flowers: [\n        {\n          name: 'Roses',\n          amount: 25,\n          color: '#cc2936'\n        },\n        {\n          name: 'Tulips',\n          amount: 40,\n          color: '#f2c640'\n        },\n        {\n          name: 'Daisies',\n          amount: 15,\n          color: '#2a93d4'\n        },\n        {\n          name: 'Narcissuses',\n          amount: 9,\n          color: '#F7AD0A'\n        }\n      ]\n    }\n  },\n  computed: {\n    transformedFlowerData() {\n      return {\n        name: 'Top Level',\n        children: this.flowers.map(flower =&gt; ({\n          ...flower,\n          parent: 'Top Level'\n        }))\n      }\n    }\n  }\n}\n&lt;/script&gt;</code></pre>\n<p>Right now, we have everything in place to start using some of D3&rsquo;s magic. Let&rsquo;s import only the parts we need and let D3 do its calculations.</p>\n<pre><code class=\"language-markup\">&lt;template&gt;\n  &lt;svg width=\"500\" height=\"500\"&gt;\n  &lt;/svg&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport { hierarchy, pack } from 'd3-hierarchy'\nexport default {\n  data() {\n    return {\n      flowers: [\n        {\n          name: 'Roses',\n          amount: 25,\n          color: '#cc2936'\n        },\n        {\n          name: 'Tulips',\n          amount: 40,\n          color: '#f2c640'\n        },\n        {\n          name: 'Daisies',\n          amount: 15,\n          color: '#2a93d4'\n        },\n        {\n          name: 'Narcissuses',\n          amount: 9,\n          color: '#F7AD0A'\n        }\n      ]\n    }\n  },\n  computed: {\n    transformedFlowerData() {\n      return {\n        name: 'Top Level',\n        children: this.flowers.map(flower =&gt; ({\n          ...flower,\n          parent: 'Top Level'\n        }))\n      }\n    },\n\n    layoutData() {\n      // Generate a D3 hierarchy\n      const rootHierarchy =\n        hierarchy(this.transformedFlowerData)\n        .sum(d =&gt; d.size)\n        .sort((a, b) =&gt; {\n          return b.value - a.value\n        })\n      // Pack the circles inside the viewbox\n      return pack()\n        .size([500, 500])\n        .padding(10)(rootHierarchy)\n    }\n  }\n}\n&lt;/script&gt;</code></pre>\n<p>Finally, we can use the layoutData property to compose a template like we would in any other Vue component. Here we use the calculated layout values to add some labels, colors, transforms and sizes.</p>\n<pre><code class=\"language-markup\">&lt;template&gt;\n  &lt;svg width=\"500\" height=\"500\"&gt;\n    &lt;g\n      class=\"flower\"\n      v-for=\"flower in layoutData.children\"\n      :key=\"flower.data.name\"\n      :style=\"{\n        transform: `translate(${flower.x}px, ${flower.y}px)`\n      }\"\n    &gt;\n      &lt;circle\n        class=\"flower__circle\"\n        :r=\"flower.r\"\n        :fill=\"flower.data.color\"\n      /&gt;\n      &lt;text class=\"flower__label&rdquo;&gt;\n        {{ flower.data.name }}\n      &lt;/text&gt;\n    &lt;/g&gt;\n  &lt;/svg&gt;\n&lt;/template&gt;</code></pre>\n<p>Adding a simple CSS transition will make value changes animate smoothly:</p>\n<pre><code class=\"language-css\">.flower {\n  transition: transform 0.1s ease-in-out;\n}\n\n.flower__circle {\n  transition: r 0.1s ease-in-out;\n}</code></pre>\n<p>The chart now looks just as we intended. You can now expand your component functionality as you like, by adding some controls to alter the state for example:</p>\n<figure><iframe class=\"wide\" style=\"height: 500px; border: 0; border-radius: 4px; overflow: hidden;\" title=\"Vue.js and D3\" src=\"https://codesandbox.io/embed/6lvzwvpjnn?fontsize=14\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe></figure>\n<h2>Conclusion</h2>\n<p>Nothing is perfect of course, and there are three <strong>caveats</strong> to this technique you should know about.</p>\n<ol>\n<li>For big sets of data, it gets more and more difficult to keep a good performance. Especially when using a lot of animations. However, this also applies when you&rsquo;re using D3 without Vue.js.</li>\n<li>For simple and well-known chart formats, it might still be easier to just use something like Chart.js or Highcharts.</li>\n<li>Some more complex features of D3, like gravity-based animations, spring values or drag and drop-interactions might be a little harder to integrate this way. However, most of them will just work fine.</li>\n</ol>\n<p>Luckily, this technique also has a lot of <strong>advantages</strong>:</p>\n<ol>\n<li>Your code stays very close to the actual result.</li>\n<li>This makes experimenting easy and fast.</li>\n<li>Your code will blend very nicely with your existing Vue.js code.</li>\n<li>Your code will be very approachable. Even someone who only knows HTML and CSS will be able to make adjustments.</li>\n<li>Since you can also use Vue for mobile apps (with for example <a href=\"https://nativescript.org/\" target=\"_blank\" rel=\"noreferrer noopener\">NativeScript</a>or <a href=\"https://weex.apache.org/\" target=\"_blank\" rel=\"noreferrer noopener\">Weex</a>) you can use D3 on virtually any platform that supports Vue.</li>\n</ol>\n<p>I really hope next time your project needs some kind of custom out-of-the-box chart, you&rsquo;ll think of this talk and give D3 a chance. The rest will be up to your imagination.</p>",
            "url": "https://www.simonwuyts.com/articles/vuejs-and-d3-a-chart-waiting-to-happen",
            "title": "Vue.js and D3: A Chart Waiting To Happen",
            "summary": "<p>This article is the summary of a talk I gave at the Vue.js Antwerp meetup. For a while now, D3.js has been the go-to JavaScript library for creating custom data visualizations. However, it&rsquo;s sometimes perceived as difficult to get started with or unsuitable for small projects. In this article I will show you how combining D3 and Vue can make your quest for the perfect data visualization a whole lot easier.</p>",
            "date_modified": "2019-03-29T00:00:00.000Z"
        },
        {
            "id": "hand-drawn-underlines-with-svg-filters",
            "content_html": "<p>An SVG filter is a combination of so-called filter primitives and lets you define all kinds of creative effects. Once defined, an SVG filter is not rendered itself. In order to use it, you can apply it to SVG or HTML elements. <a href=\"https://caniuse.com/#search=svg%20filter\">Browser support</a> goes further back than you probably need.</p>\n<p>In order to make the straight underlines in my design look slightly less perfect, I used a combination of the following filter primitives:</p>\n<ul>\n<li><code>feTurbulence</code> &mdash; generates a \"cloudy\" image that will serve as the base for the distortion. Altering its attributes will alter the horizontal or vertical amount of distortion.</li>\n<li><code>feDisplacementMap</code> &mdash; will take the turbulence image and distort the original image based on its color values.</li>\n<li><code>feGaussianBlur</code> &mdash; will blur the distorted image by 1 pixel to smooth the edges</li>\n<li><code>feColorMatrix</code> &mdash; will increase contrast and \"undo\" the blur (while keeping the smooth edges)</li>\n<li><code>feOffset</code> &mdash; will correct the lines vertical position by 2 pixels</li>\n</ul>\n<p>The entire filter definition looks like this:</p>\n<pre><code class=\"language-markup\">&lt;svg width=\"0\" height=\"0\" xmlns=\"http://www.w3.org/2000/svg\"&gt;\n\t&lt;defs&gt;\n\t\t&lt;filter id=\"handdrawn\" x=\"-20%\" y=\"-20%\" width=\"140%\" height=\"140%\"&gt;\n\t\t\t&lt;feTurbulence type=\"fractalNoise\" basefrequency=\"0.001 0.01\" numoctaves=\"26\" stitchtiles=\"stitch\" result=\"turbulence\"/&gt;\n\t\t\t&lt;feDisplacementMap in=\"SourceGraphic\" in2=\"turbulence\" scale=\"20\" xchannelselector=\"R\" ychannelselector=\"G\" result=\"displacementMap\"/&gt;\n\t\t\t&lt;feGaussianBlur in=\"displacementMap\" stddeviation=\"1\" color-interpolation-filters=\"sRGB\" result=\"blur\"/&gt;\n\t\t\t&lt;feColorMatrix in=\"blur\" mode=\"matrix\" values=\"1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 18 -7\" result=\"contrast\"/&gt;\n\t\t\t&lt;feOffset in=\"contrast\" dy=\"2\"/&gt;\n\t\t&lt;/filter&gt;\n\t&lt;/defs&gt;\n&lt;/svg&gt;\n</code></pre>\n<p>The only step left here is to apply the filter through CSS. Because I only wanted the underline to be affected, I put two identical elements on top of each other:</p>\n<ul>\n<li>The first one contains the text.</li>\n<li>The second one contains the underline (a CSS <code>linear-gradient</code> background).</li>\n</ul>\n<p>You can see the combined result in the following CodePen:</p>\n<figure><iframe style=\"width: 100%;\" title=\"Hand-Drawn Underline Effect\" src=\"https://codepen.io/simonwuyts/embed/OJVPyxX?height=265&amp;theme-id=dark&amp;default-tab=html,result\" height=\"400\" frameborder=\"no\" scrolling=\"no\" allowfullscreen=\"allowfullscreen\">\n  See the Pen <a href=\"https://codepen.io/simonwuyts/pen/OJVPyxX\">Hand-Drawn Underline Effect</a> by Simon Wuyts\n  (<a href=\"https://codepen.io/simonwuyts\">@simonwuyts</a>) on <a href=\"https://codepen.io\">CodePen</a>.</iframe></figure>",
            "url": "https://www.simonwuyts.com/articles/hand-drawn-underlines-with-svg-filters",
            "title": "Hand-Drawn Underlines with SVG Filters",
            "summary": "<p>In one of my early designs for this website, I put a bold underline under each top-level title. Though I liked the general look, the clean lines made it feel a little impersonal. It turned out to be quite easy to make them look handdrawn thanks to the magic of SVG filters.</p>",
            "date_modified": "2020-02-07T00:00:00.000Z"
        },
        {
            "id": "vue-3-a-modern-setup-that-will-save-you-time",
            "content_html": "<p>Vite is an opinionated build tool by the creator of Vue, <a href=\"https://evanyou.me/\">Evan You</a>. It has built-in support for modern front-end tools (PostCSS, CSS preprocessors, TypeScript, ES imports...), it's extensible, but most of all: it's fast. By using modern browsers' native ES Module imports (a similar approach as <a href=\"https://github.com/pikapkg/snowpack\">Snowpack</a>), launching the dev server only takes seconds and hot reloading is instant.</p>\n<p>Setting up a new Vite project takes little time, here's how I do it.</p>\n<h2>Creating a new Vite App</h2>\n<p>First of all, open your terminal and navigate to the parent directory of your new project. Run the following commands:</p>\n<pre><code>yarn create vite-app my-new-project\ncd my-new-project\nyarn\n</code></pre>\n<p>This will create a <code>my-new-project</code> folder containing the base files you need to get started, navigate you to the root of your project, and install dependencies.</p>\n<h2>Running the Dev Server</h2>\n<p>Now run the following command to start the dev server:</p>\n<pre><code>yarn dev\n</code></pre>\n<p>If you point your browser to <code>http://localhost:3000/</code> you will see your Vue app running. Try changing some things in <code>src/HelloWorld.vue</code> and watch how the page will refresh the changed parts in a blink.</p>\n<figure><img src=\"https://s3.eu-west-3.amazonaws.com/simonwuyts-portfolio/43800174-50ed-46ae-879b-4435a1e81a33.png\" alt=\"Vue 3 application running in the browser\" /></figure>\n<h2>Building for Production</h2>\n<p>Running the Vite dev server will only work in browsers that support native ES Module imports (that's all of the latest versions of today's modern browsers). To build your app for production, run the following command:</p>\n<pre><code>yarn build\n</code></pre>\n<p>Behind the scenes, Vite will use Rollup to bundle and optimize your app. The result will be copied to the <code>dist</code> folder.</p>\n<p><img src=\"https://s3.eu-west-3.amazonaws.com/simonwuyts-portfolio/eeb378f6-bf44-4b47-8e59-e2d031e40067.png\" alt=\"Vue 3 application running in the browser\" width=\"1514\" height=\"1050\" /></p>\n<h2>Future-Proof CSS</h2>\n<p>Vite natively supports CSS imports and uses PostCSS for CSS processing. This means you can add a <code>postcss.config.js</code> file and install any plugin you might need. I like to use the <a href=\"https://github.com/csstools/postcss-preset-env\"><code>postcss-preset-env</code></a> plugin, which lets you write modern CSS and polyfills it based on <a href=\"https://github.com/browserslist/browserslist\">the browsers you want to support.</a></p>\n<p>First, install the plugin by running</p>\n<pre><code>yarn add -D postcss-preset-env\n</code></pre>\n<p>Now add the following <code>postcss.config.js</code> file to the root of your project:</p>\n<pre><code class=\"language-js\">module.exports = {\n  plugins: {\n    'postcss-preset-env': { stage: 1 },\n  },\n}\n</code></pre>\n<p>The <code>stage</code> property defines how many experimental features you want to enable, from <code>0</code> (experimental) through <code>4</code> (stable).</p>\n<p>You can now write modern CSS while Vite will take care of translating it to the browser:</p>\n<pre><code class=\"language-css\">@import '_base.css';\n\n@custom-media --small-viewport (max-width: 31.25em);\n\n:root {\n  --color-primary: red;\n  --color-secondary: blue;\n}\n\np {\n  color: var(--color-primary);\n\n  &amp;:hover {\n    color: var(--color-secondary);\n  }\n\n  @media (--small-viewport) {\n    color: black;\n  }\n}\n</code></pre>\n<p>It's up to you how and where you want to load your CSS styles. You can either use the <code>&lt;style&gt;</code> block in your Single File Components or import it directly in your <code>main.js</code> file.</p>\n<h3>A note about SCSS</h3>\n<p>Sometimes I still prefer the power of SCSS over CSS. Luckily, Vite supports pre-processors. All you need to do is install it:</p>\n<pre><code>yarn add -D sass\n</code></pre>\n<h2>TypeScript</h2>\n<p>Vue 3 has very good support for <a href=\"https://www.typescriptlang.org/\">TypeScript</a>. Whether you want to use it for better typing in the new Composition API or just to improve editor autocompletion, Vite supports TypeScript out of the box. Rename your <code>main.js</code> file to <code>main.ts</code> and you're ready to go.</p>\n<p>A TypeScript-based Single File Component's <code>&lt;script&gt;</code> block typically looks like this:</p>\n<pre><code class=\"language-js\">import { defineComponent } from 'vue'\n\nexport default defineComponent({\n  name: 'MyComponent'\n})\n</code></pre>\n<h2>Code Formatting</h2>\n<p>To keep my code style consistent, I use <a href=\"https://prettier.io/\">Prettier</a>. Prettier has great support for Vue and integrates well with other tools (editors, linters...). To use Prettier, install it first:</p>\n<pre><code>yarn add -D prettier\n</code></pre>\n<p>You can now configure your code style by adding <code>.prettierrc.json</code> to the root of your project. I like to keep mine close to the default configuration:</p>\n<pre><code class=\"language-js\">{\n  \"semi\": false,\n  \"singleQuote\": true,\n  \"trailingComma\": \"all\"\n}\n</code></pre>\n<h2>Linting</h2>\n<p>Most code editors have support for <a href=\"https://eslint.org/\">ESLint</a> code inspection. It will prevent bugs by warning you for common errors. Setting everything up correctly took some trial and error, but here's how I did it.</p>\n<p>First, install the necessary packages by running</p>\n<pre><code>yarn add -D eslint eslint-config-prettier eslint-plugin-vue\n</code></pre>\n<p>If you're using TypeScript, you should also install the following packages:</p>\n<pre><code>yarn add -D typescript @typescript-eslint/eslint-plugin @typescript-eslint/parser @typescript-eslint/eslint-plugin @vue/eslint-config-typescript typescript\n</code></pre>\n<p>Now add the following <code>.eslintrc.js</code> to the root of your project:</p>\n<pre><code class=\"language-js\">module.exports = {\n  root: true,\n  env: {\n    node: true,\n  },\n  extends: [\n    'plugin:vue/vue3-recommended',\n    'eslint:recommended',\n    'prettier',\n    'prettier/vue',\n    '@vue/typescript',\n  ],\n  plugins: ['vue'],\n}\n</code></pre>\n<p>Take a look at the <a href=\"https://eslint.vuejs.org/\">ESLint Vue Plugin docs</a> to see how you can configure your editor to work with ESLint.</p>\n<p>ESLint will now take both your Prettier config and the recommended Vue coding rules into account. You can replace <code>plugin:vue/vue3-recommended</code> with one of the following values, depending on how you strict you would like ESLint to be:</p>\n<ul>\n<li><strong>Base Rules</strong>: <code>plugin:vue/base</code></li>\n<li><strong>Essential</strong>: <code>plugin:vue/vue3-essential</code></li>\n<li><strong>Strongly recommended</strong>: <code>plugin:vue/vue3-strongly-recommended</code></li>\n</ul>\n<h2>TLDR;</h2>\n<p>Since I started using this rather minimal Vite-based dev setup, I spent more time on actual coding and less time on configuring tools or waiting for builds to complete. I think Vite (and similar tools like Snowpack) will play a big role in making modern front-end coding more enjoyable and easier to get started with.</p>\n<p><strong>Interested in learning more about developing interactive web apps with Vue? Don't hesitate to <a href=\"https://www.simonwuyts.com/contact/\">ask me</a> about my Vue workshops.</strong></p>",
            "url": "https://www.simonwuyts.com/articles/vue-3-a-modern-setup-that-will-save-you-time",
            "title": "Vue 3: A Modern Setup That Will Save You Time",
            "summary": "<p>With the third major version of Vue being <span style=\"text-decoration: line-through;\">almost</span> ready, I started using it for most of my new Vue projects. For years, I have been using the excellent Vue CLI to scaffold new apps, but recently <a href=\"https://github.com/vitejs/vite\">Vite</a> (French for fast ‚ö°Ô∏è) caught my eye.</p>",
            "date_modified": "2020-09-12T00:00:00.000Z"
        }
    ]
}